version: 2.1 # needed for executors

executors:
  jvm-executor:
    docker:
      - image: openjdk:8-jdk
    environment:
      _JAVA_OPTIONS: "-Xmx3G -Xms2G"
    working_directory: /app
    resource_class: medium+
  mit-executor:
    docker:
      - image: alpine:3.10

jobs:
  build:
    executor: jvm-executor
    steps:
      - checkout
      - run:
          name: Setup
          command: apt update -y && apt install -y gnupg2
      - run:
          name: Verify files
          command: |
            curl -sSL https://secchannel.rsk.co/release.asc | gpg2 --import -
            gpg2 --verify SHA256SUMS.asc && sha256sum --check SHA256SUMS.asc
      - run:
          name: Build
          command: |
            ./configure.sh
            ./gradlew --no-daemon dependencies
            ./gradlew --no-daemon --stacktrace build -x test
      - persist_to_workspace:
          root: .
          paths:
            - .
  sonarqube:
    executor: jvm-executor
    steps:
      - attach_workspace:
          at: /app
      - run:
          name: Run SonarQube analysis
          command: |
            extra_flags=""
            if [ -n "$CIRCLE_PULL_REQUEST" ]; then
              # https://community.sonarsource.com/t/no-code-or-issue-found-in-pull-request-decorations-github-circleci/8496
              git branch -f master origin/master
              # extract PR number, as PR URLs are in the form
              # https://github.com/$user/$repo/pull/$pr_number
              pr_number=${CIRCLE_PULL_REQUEST##*/}
              extra_flags="-Dsonar.pullrequest.base=master
                -Dsonar.pullrequest.branch=$CIRCLE_BRANCH
                -Dsonar.pullrequest.key=$pr_number"
            else
              extra_flags="-Dsonar.branch.name=master"
            fi
            ./gradlew sonarqube --no-daemon -x build -x test \
                $extra_flags \
                -Dsonar.organization=rsksmart \
                -Dsonar.host.url="$SONAR_URL" \
                -Dsonar.login="$SONAR_TOKEN"
  rskj-tests:
    executor: jvm-executor
    steps:
      - attach_workspace:
          at: /app
      - run:
          name: rskj tests
          command: ./gradlew --no-daemon --stacktrace test
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find rskj-core/build/test-results -type f -name "*.xml" \
                -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
  mining-tests:
    executor: mit-executor
    steps:
      - run:
          name: Setup
          command: apk add --no-cache curl jq
      - run:
          name: Mining integration tests
          command: |
            wait_for_completion() {
              # inspired from https://discuss.circleci.com/t/waiting-for-build-to-complete-when-invoked-via-http-api/14989
              build_number=$1
              poll_interval=60

              i=0
              max_count=20
              while [ $i -lt $max_count ]; do
                # output to avoid CircleCI considering the job stuck
                res=$(curl -Ssfu "$CIRCLE_INTEGRATIONS_TOKENS:" \
                    "https://circleci.com/api/v1.1/project/github/$MIT_ORGANIZATION/$MIT_PROJECT/$build_number" \
                    | jq -r '[.lifecycle, .outcome] | @tsv')
                IFS="	" set -- $res
                lifecycle=${1:-}
                outcome=${2:-}
                if [ "$lifecycle" = "queued" ]; then
                  printf "Build is enqueued. Waiting...\n"
                  # don't increment $i
                else
                  printf "[%02u/%02u] Waiting for build %s ...\n" \
                      "$i" "$max_count" "$build_url"
                  i=$(($i + 1))
                fi
                if [ "$lifecycle" = "finished" ]; then
                  printf "Build %u finished. Outcome: \"%s\".\n" \
                      "$build_number" "$outcome"
                  # return success iff job outcome is "success"
                  test "$outcome" = "success"
                  return $?
                fi

                sleep $poll_interval
              done
              return 1
            }

            json_payload='{
              "build_parameters": {
                "RSKJ_CIRCLE_BRANCH": "'$CIRCLE_BRANCH'",
                "RSKJ_CIRCLE_USERNAME": "'$CIRCLE_PROJECT_USERNAME'",
                "RSKJ_CIRCLE_REPONAME": "'$CIRCLE_PROJECT_REPONAME'",
                "RSKJ_PR_NUMBER": "'$CIRCLE_PR_NUMBER'",
                "RSKJ_CIRCLE_SHA1": "'$CIRCLE_SHA1'"
              }
            }'
            res=$(curl -Ssf -u "$CIRCLE_INTEGRATIONS_TOKEN:" \
                -H "Content-type: application/json" -d "$json_payload" \
                "https://circleci.com/api/v1.1/project/github/$MIT_ORGANIZATION/$MIT_PROJECT/tree/$MIT_BRANCH" \
                | jq -r '[.build_url, .build_num] | @tsv')
            IFS="	" set -- $res
            test $# -eq 2 # ensure exactly 2 values are expanded
            build_url=$1
            build_num=$2
            printf "Running mining integration tests. Follow it on:\n\n    %s\n\n" "$build_url"
            sleep 10 # give CircleCI some time to spin up the job
            wait_for_completion "$build_num"

workflows:
  # https://circleci.com/docs/2.0/configuration-reference/#version-1
  # As of commit date, it reads:
  #     Should currently be `2`
  version: 2
  build-and-test:
    jobs:
      - build
      - sonarqube:
          requires:
            - build
      - rskj-tests:
          requires:
            - build
      - mining-tests:
          requires:
            - rskj-tests
