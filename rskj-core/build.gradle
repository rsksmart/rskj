plugins {
    id 'application'
}

apply plugin: 'maven-publish'
apply plugin: 'jacoco'

test {
    beforeTest { descriptor ->
        logger.lifecycle("Running test: ${descriptor}")
    }

    jvmArgs '-Xss32m', '-Xmx3G'

    testLogging {
        events "failed"
        exceptionFormat "short"
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

repositories {
    mavenCentral()
    maven {
        url "https://deps.rsklabs.io"
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = 'co.rsk.Start'
applicationDefaultJvmArgs = ["-server", "-Xss32m", "-Xms3G", "-XX:+UseCompressedOops", "-XX:-OmitStackTraceInFastThrow"]

tasks.withType(JavaCompile) {
    options.warnings = false
    options.encoding = 'UTF-8'
    options.compilerArgs << '-XDignore.symbol.file'
}

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true

    dirMode = 0775
    fileMode = 0664
}

ext {
    libVersions = [
            nettyVer               : '4.0.56.Final',
            spongyCastleVer        : '1.52.0.0',
            bouncyCastleVer        : '1.59',
            ethereumLeveldbJniVer  : '1.18.3',
            slf4jVer               : '1.7.25',
            logbackVer             : '1.2.2',
            jacksonVer             : '2.8.7',
            commonsLang3Ver        : '3.5',
            typesafeConfigVer      : '1.3.3',
            mapdbVer               : '2.0-beta13',
            jsonrpc4jVer           : '1.5.1',
            jaxwsRtVer             : '2.3.3',

            bitcoinjThinVer        : '0.14.4-rsk-10',
            rskjNativeVer          : '1.2.0',
    ]

    libs = [
            nettyLib               : "io.netty:netty-codec-http:${libVersions.nettyVer}",
            spongyCastleLib        : "com.madgag.spongycastle:core:${libVersions.spongyCastleVer}",
            bouncyCastleLib        : "org.bouncycastle:bclcrypto-jdk15on:${libVersions.bouncyCastleVer}",
            ethereumLeveldbJniLib  : "org.ethereum:leveldbjni-all:${libVersions.ethereumLeveldbJniVer}",
            slf4jApiLib            : "org.slf4j:slf4j-api:${libVersions.slf4jVer}",
            log4jOverSlf4jLib      : "org.slf4j:log4j-over-slf4j:${libVersions.slf4jVer}",
            logbackCoreLib         : "ch.qos.logback:logback-core:${libVersions.logbackVer}",
            logbackClassicLib      : "ch.qos.logback:logback-classic:${libVersions.logbackVer}",
            jacksonLib             : "com.fasterxml.jackson.core:jackson-databind:${libVersions.jacksonVer}",
            commonsLang3Lib        : "org.apache.commons:commons-lang3:${libVersions.commonsLang3Ver}",
            typesafeConfigLib      : "com.typesafe:config:${libVersions.typesafeConfigVer}",
            mapdbLib               : "org.mapdb:mapdb:${libVersions.mapdbVer}",
            jsonrpc4jLib           : "com.github.briandilley.jsonrpc4j:jsonrpc4j:${libVersions.jsonrpc4jVer}",
            jaxwsRtLib             : "com.sun.xml.ws:jaxws-rt:${libVersions.jaxwsRtVer}",

            bitcoinjThinLib        : "co.rsk.bitcoinj:bitcoinj-thin:${libVersions.bitcoinjThinVer}",
            rskjNativeLib          : "co.rsk:native:${libVersions.rskjNativeVer}",
    ]

    testLibVersions = [
            jsonSimpleVer  : '1.1.1',
            junitVer       : '4.12',
            mockitoVer     : '2.23.4',
            powermockVer   : '2.0.2',
            awaitilityVer  : '3.0.0',
            commonsIoVer   : '2.5',
            commonsCodecVer: '1.10',
            okhttpWsVer    : '2.7.2',

            rskLllVer      : '0.0.2',
    ]

    testLibs = [
            jsonSimpleLib           : "com.googlecode.json-simple:json-simple:${testLibVersions.jsonSimpleVer}",
            junitLib                : "junit:junit:${testLibVersions.junitVer}",
            mockitoLib              : "org.mockito:mockito-core:${testLibVersions.mockitoVer}",
            powermockModuleJunit4Lib: "org.powermock:powermock-module-junit4:${testLibVersions.powermockVer}",
            powermockApiMockito2Lib : "org.powermock:powermock-api-mockito2:${testLibVersions.powermockVer}",
            awaitilityLib           : "org.awaitility:awaitility:${testLibVersions.awaitilityVer}",
            commonsIoLib            : "commons-io:commons-io:${testLibVersions.commonsIoVer}",
            commonsCodecLib         : "commons-codec:commons-codec:${testLibVersions.commonsCodecVer}",
            okhttpWsLib             : "com.squareup.okhttp:okhttp-ws:${testLibVersions.okhttpWsVer}",

            rskLllLib               : "co.rsk:lll-compiler:${testLibVersions.rskLllVer}",
    ]
}

dependencies {
    implementation "${libs.nettyLib}"
    implementation "${libs.spongyCastleLib}"
    implementation "${libs.bouncyCastleLib}"
    implementation "${libs.ethereumLeveldbJniLib}"
    implementation "${libs.slf4jApiLib}"
    implementation "${libs.jacksonLib}"
    implementation "${libs.commonsLang3Lib}"
    implementation "${libs.typesafeConfigLib}"
    implementation "${libs.mapdbLib}"
    implementation "${libs.jsonrpc4jLib}"
    implementation "${libs.jaxwsRtLib}"

    implementation "${libs.bitcoinjThinLib}"
    implementation "${libs.rskjNativeLib}"

    runtimeOnly "${libs.log4jOverSlf4jLib}"
    runtimeOnly "${libs.logbackCoreLib}"
    runtimeOnly "${libs.logbackClassicLib}"

    testImplementation "${testLibs.jsonSimpleLib}"
    testImplementation "${testLibs.junitLib}"
    testImplementation "${testLibs.mockitoLib}"
    testImplementation "${testLibs.powermockModuleJunit4Lib}"
    testImplementation "${testLibs.powermockApiMockito2Lib}"
    testImplementation "${testLibs.awaitilityLib}"
    testImplementation "${testLibs.commonsIoLib}"
    testImplementation "${testLibs.commonsCodecLib}"
    testImplementation "${testLibs.okhttpWsLib}"

    testImplementation "${testLibs.rskLllLib}"
}

javadoc {
    options.author = true
    options.header = "RskJ"
    options.addStringOption('-quiet')
    options.encoding = "UTF-8"
}

def generatedResources = "$buildDir/generated-resources"

sourceSets {
    main {
        resources {
            srcDirs += generatedResources
        }
    }
}

task generateResources {
    def buildInfoFile = 'build-info.properties'

    // This line was added, because this file is not getting overwritten in Mac M1 machines by this task.
    // For now we are deleting the file and adding it again.
    delete "${generatedResources}/${buildInfoFile}"

    doLast {
        mkdir generatedResources
        def generated = new File(generatedResources as String, buildInfoFile)
        def commitHash = gitCommitHash()
        def currentBranch = gitCurrentBranch()
        generated.text = """
build.hash=$commitHash
build.branch=$currentBranch
"""
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

jar {
    dependsOn 'generateResources'
    def commitHash = gitCommitHash()
    def currentBranch = gitCurrentBranch()
    manifest {
        attributes 'Git-Commit': commitHash,
                'Git-Branch': currentBranch
    }
    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir
    from generatedResources
}

task generatePom(dependsOn: jar) {
    def jarName = jar.outputs.files.singleFile.name
    def pomFile = libsDirectory.dir("${jarName.take(jarName.lastIndexOf('.'))}.pom").get().asFile
    ext.file = pomFile
    subprojects {
        doLast {
            pom {
                project {
                    groupId project.group as String
                    artifactId project.name
                    version project.version

                    licenses {
                        license {
                            name 'GNU General Public License (GPL) version 3.0'
                            url 'http://www.gnu.org/licenses/gpl-3.0.txt'
                            distribution 'repo'
                        }
                    }
                }
            }.writeTo(pomFile)
        }
    }
}

task fatJar(type: Jar, dependsOn: jar) {
    archiveClassifier = 'all'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': "$mainClassName"
    }

    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
    exclude 'module-info.class'

    for (def jar in configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }) {
        from(jar) {
            eachFile { details -> amendPathIfNeeded(details) }
        }
    }

    with jar
}

tasks.withType(Tar) {
    compression = Compression.GZIP
    archiveExtension.set('tar.gz')
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives jar
    archives(generatePom.file) {
        type 'text'
        builtBy generatePom
    }
    archives fatJar
    archives distTar
}

static def gitCurrentBranch() {
    def process = "git rev-parse --abbrev-ref HEAD".execute()
    return process.text.trim()
}

static def gitCommitHash() {
    def process = "git rev-parse --short HEAD".execute()
    return process.text.trim()
}

static def amendPathIfNeeded(details) {
    def uPath = details.path.toUpperCase()
    if (uPath.startsWith("META-INF/LICENSE") || uPath.startsWith("META-INF/NOTICE")) {
        def originalFile = details.file as File
        def jarName = originalFile.parentFile.parentFile.name.split(".jar")[0]
        def newPath = originalFile.parentFile.name + "/" + jarName + "_" + originalFile.name
        details.path = newPath
    }
}
