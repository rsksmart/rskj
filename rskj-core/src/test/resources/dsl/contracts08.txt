
comment

// Contracts compiled using
// Truffle v5.0.14 (core: 5.0.14)
// Solidity v0.5.0 (solc-js)
// the contract to be deployed is ContractA

// the contracts source code

// ContractA.sol

pragma solidity >=0.5.0 <0.6.0;

import "./ContractB.sol";
import "./ContractC.sol";

contract ContractA {
    ContractB b;
    ContractC c;
    bytes32 hash;

    constructor() public {
        b = new ContractB();
        c = new ContractC();
    }

    function() external payable { }

    function invoke() public {
        b.invoke();
        c.invoke();
    }

    function transfer(address payable receiver, uint amount) public {
        receiver.transfer(amount);
    }

    function kill(address payable receiver) public {
        selfdestruct(receiver);
    }

    function success(uint value) public {
        require(value > 0, "value should be positive");
        b.success(value - 1);
    }

    function lotofwork(uint times) public {
        for (uint k = 0; k < times; k++)
            hash = keccak256(abi.encode(k));
    }
}

// ContractB.sol

pragma solidity >=0.5.0 <0.6.0;

import "./ContractC.sol";

contract ContractB {
    ContractC c;

    constructor() public {
        c = new ContractC();
    }

    function invoke() public {
        c.invoke();
    }

    function success(uint value) public {
        require(value > 0, "value should be positive");
        c.success(value - 1);
    }
}

// ContractC.sol

pragma solidity >=0.5.0 <0.6.0;

contract ContractC {
    uint counter;

    function invoke() public {
        counter++;
    }

    function success(uint value) public {
        require(value > 0, "value should be positive");
    }
}

end

account_new acc1 10000000


# Deploy ContractA

transaction_build tx01
    sender acc1
    receiverAddress 00
    value 0
    data 608060405234801561001057600080fd5b506100196100df565b604051809103906000f080158015610035573d6000803e3d6000fd5b506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061007d6100ef565b604051809103906000f080158015610099573d6000803e3d6000fd5b50600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506100ff565b6040516104aa806105f583390190565b60405161017d80610a9f83390190565b6104e78061010e6000396000f3fe60806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806385f7893f1461006f578063888ea243146100aa578063a9059cbb146100e5578063cab7f52114610140578063cbf0b0c014610157575b005b34801561007b57600080fd5b506100a86004803603602081101561009257600080fd5b81019080803590602001909291905050506101a8565b005b3480156100b657600080fd5b506100e3600480360360208110156100cd57600080fd5b81019080803590602001909291905050506101f4565b005b3480156100f157600080fd5b5061013e6004803603604081101561010857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061031a565b005b34801561014c57600080fd5b50610155610365565b005b34801561016357600080fd5b506101a66004803603602081101561017a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104a2565b005b60008090505b818110156101f05780604051602001808281526020019150506040516020818303038152906040528051906020012060028190555080806001019150506101ae565b5050565b60008111151561026c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f76616c75652073686f756c6420626520706f736974697665000000000000000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663888ea243600183036040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156102ff57600080fd5b505af1158015610313573d6000803e3d6000fd5b5050505050565b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610360573d6000803e3d6000fd5b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cab7f5216040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156103ea57600080fd5b505af11580156103fe573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cab7f5216040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561048857600080fd5b505af115801561049c573d6000803e3d6000fd5b50505050565b8073ffffffffffffffffffffffffffffffffffffffff16fffea165627a7a72305820eadfd3b062e324b7202204c827667340d2ac5ea3c00c79c894b4715880e6c2ea0029608060405234801561001057600080fd5b5061001961007a565b604051809103906000f080158015610035573d6000803e3d6000fd5b506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061008a565b60405161017d8061032d83390190565b610294806100996000396000f3fe60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063888ea24314610051578063cab7f5211461008c575b600080fd5b34801561005d57600080fd5b5061008a6004803603602081101561007457600080fd5b81019080803590602001909291905050506100a3565b005b34801561009857600080fd5b506100a16101c9565b005b60008111151561011b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f76616c75652073686f756c6420626520706f736974697665000000000000000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663888ea243600183036040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156101ae57600080fd5b505af11580156101c2573d6000803e3d6000fd5b5050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cab7f5216040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561024e57600080fd5b505af1158015610262573d6000803e3d6000fd5b5050505056fea165627a7a72305820adf5d0b42a597b3769109050917ae85e576782f84995aed2b799140e0fb8d03c0029608060405234801561001057600080fd5b5061015d806100206000396000f3fe60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063888ea24314610051578063cab7f5211461008c575b600080fd5b34801561005d57600080fd5b5061008a6004803603602081101561007457600080fd5b81019080803590602001909291905050506100a3565b005b34801561009857600080fd5b506100a161011e565b005b60008111151561011b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f76616c75652073686f756c6420626520706f736974697665000000000000000081525060200191505060405180910390fd5b50565b600080815480929190600101919050555056fea165627a7a72305820bb7e5d5d6c3f7780b3dae7ee7bedf68b7ddca01ccd960d496f6b4db12fc711d30029608060405234801561001057600080fd5b5061015d806100206000396000f3fe60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063888ea24314610051578063cab7f5211461008c575b600080fd5b34801561005d57600080fd5b5061008a6004803603602081101561007457600080fd5b81019080803590602001909291905050506100a3565b005b34801561009857600080fd5b506100a161011e565b005b60008111151561011b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f76616c75652073686f756c6420626520706f736974697665000000000000000081525060200191505060405180910390fd5b50565b600080815480929190600101919050555056fea165627a7a72305820bb7e5d5d6c3f7780b3dae7ee7bedf68b7ddca01ccd960d496f6b4db12fc711d30029
    gas 1200000
    build

block_build b01
    parent g00
    transactions tx01
    build

block_connect b01

# Assert best block
assert_best b01


# invoke invoke() method

transaction_build tx02
    sender acc1
    nonce 1
    contract tx01   # created in tx01
    value 0
    data cab7f521
    gas 1000000
    build

block_build b02
    parent b01
    transactions tx02
    build

block_connect b02

# Assert best block
assert_best b02

# invoke success(uint256) method

transaction_build tx03
    sender acc1
    nonce 2
    contract tx01   # created in tx01
    value 0
    data 888ea2430000000000000000000000000000000000000000000000000000000000000002
    gas 1000000
    build

block_build b03
    parent b02
    transactions tx03
    build

block_connect b03

# Assert best block
assert_best b03

# invoke kill(address) method

transaction_build tx04
    sender acc1
    nonce 3
    contract tx01   # created in tx01
    value 0
    data cbf0b0c00000000000000000000000000000000000000000000000000000000000000001
    gas 1000000
    build

block_build b04
    parent b03
    transactions tx04
    build

block_connect b04

# Assert best block
assert_best b04
