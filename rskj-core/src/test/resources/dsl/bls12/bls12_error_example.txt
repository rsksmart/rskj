
comment

#python web3.py source code with solidity source code embedded for deriving the contract bytecode and the encoded abi invocation


from web3 import Web3, HTTPProvider
from solc import compile_standard
import json

compiled_sol = compile_standard({
   "language": "Solidity",
   "sources": {
       "Greeter.sol": {
           "content": '''



pragma solidity >=0.4.22 <0.7.0;

contract CallBLS {

    event Bytes(bytes);
    event Uint(uint256);

    function callPrec(uint256[8] memory input) public {
        uint256 a;
        uint256 b;
        uint256 c;
        uint256 d;
        uint256 retval;
        uint256 outLen;
        uint256 addr = 0x0a;

        uint256 len = 256;
        if (addr == 0x0a || addr == 0x0b || addr == 0x0c || addr == 0x11) {
            outLen = 128;
        } else if (addr == 0x0d || addr == 0x0e || addr == 0x0f || addr == 0x12) {
            outLen = 256;
        } else if (addr == 0x10) {
            outLen = 32;
        } else {
            require(false, "Invalid precompile");
        }
        assembly {
            let res := mload(0x40)
            // call precompile
            retval := staticcall(gas(), addr, input, len, res, outLen)
            a := mload(res)
            b := mload(add(res,32))
            c := mload(add(res,64))
            d := mload(add(res,96))

        }
        if(retval > 0) {
            emit Uint(a);
            emit Uint(b);
            emit Uint(c);
            emit Uint(d);
     	} else {
            emit Uint(0xAAA);
	}
    }
}


             '''
       }
   },
   "settings":
       {
           "outputSelection": {
               "*": {
                   "*": [
                       "metadata", "evm.bytecode"
                   ]
               }
           }
       }
 })

bytecode = compiled_sol['contracts']['Greeter.sol']['CallBLS']['evm']['bytecode']['object']
abi = json.loads(compiled_sol['contracts']['Greeter.sol']['CallBLS']['metadata'])['output']['abi']
Greeter = w3.eth.contract(abi=abi, bytecode=bytecode)

input = "0000000000000000000000000000000012196c5a43d69224d8713389285f26b98f86ee910ab3dd668e413738282003cc5b7357af9a7af54bb713d62255e80f560000000000000000000000000000000006ba8102bfbeea4416b710c73e8cce3032c31c6269c44906f8ac4f7874ce99fb17559992486528963884ce429a992fee000000000000000000000000000000000001101098f5c39893765766af4512a0c74e1bb89bc7e6fdf14e3e7337d257cc0f94658179d83320b99f31ff94cd2bad0000000000000000000000000000000003e1a9f9f44ca2cdab4f43a1a3ee3470fdf90b2fc228eb3b709fcd72f014838ac82a6d797aeefed9a0804b22ed1ce8f7"
split =[input[i*64:(i+1)*64] for i in range(0,8)]
split_as_ints = [int(i,16) for i in split]
#split_as_ints == [24058108997358572995791198733805233849, 64919141380037314951259626846564955545942841508801039217237503064228948873046, 8943751839034608341718950677784088112, 22960373508906125578228230457319349392423153123358600812527535273847071256558, 5518130401625477229784997057335968, 90148262263309915615065797686098307867639678110671636808963427619960603356077, 5159398311167556595248318777098384496, 114875172817470939641623233319069848415671408304514684912054572388799171324151]

encoded = Greeter.encodeABI(fn_name="callPrec", args=[split_as_ints])
end
account_new acc1 10000000000

# Deploy Contract

transaction_build tx01
    sender acc1
    receiverAddress 00
    value 0
    data 608060405234801561001057600080fd5b50610328806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636c9fb13b14610030575b600080fd5b610095600480360361010081101561004757600080fd5b810190808061010001906008806020026040519081016040528092919082600860200280828437600081840152601f19601f8201169050808301925050505050509192919290505050610097565b005b6000806000806000806000600a905060006101009050600a8214806100bc5750600b82145b806100c75750600c82145b806100d25750601182145b156100e0576080925061019d565b600d8214806100ef5750600e82145b806100fa5750600f82145b806101055750601282145b1561011457610100925061019c565b6010821415610126576020925061019b565b600061019a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f496e76616c696420707265636f6d70696c65000000000000000000000000000081525060200191505060405180910390fd5b5b5b5b6040518381838c865afa9450805198506020810151975060408101519650606081015195505060008411156102ad577f432cc6516825015332dc662a569788a7b0790ea2c6a53a601c743c54cbdafe60886040518082815260200191505060405180910390a17f432cc6516825015332dc662a569788a7b0790ea2c6a53a601c743c54cbdafe60876040518082815260200191505060405180910390a17f432cc6516825015332dc662a569788a7b0790ea2c6a53a601c743c54cbdafe60866040518082815260200191505060405180910390a17f432cc6516825015332dc662a569788a7b0790ea2c6a53a601c743c54cbdafe60856040518082815260200191505060405180910390a16102e7565b7f432cc6516825015332dc662a569788a7b0790ea2c6a53a601c743c54cbdafe60610aaa6040518082815260200191505060405180910390a15b50505050505050505056fea26469706673582212209eddd00e69251e5a73ad23431b9472a7a30d41ddc7b8627779d1c65dac83318564736f6c634300060b0033
    gas 2000000
    build

block_build b01
    parent g00
    transactions tx01
    build

block_connect b01
assert_best b01

# invoke callPrec method

transaction_build tx02
    sender acc1
    nonce 1
    contract tx01   # created in tx01
    value 0
    data 6c9fb13b0000000000000000000000000000000012196c5a43d69224d8713389285f26b98f86ee910ab3dd668e413738282003cc5b7357af9a7af54bb713d62255e80f560000000000000000000000000000000006ba8102bfbeea4416b710c73e8cce3032c31c6269c44906f8ac4f7874ce99fb17559992486528963884ce429a992fee000000000000000000000000000000000001101098f5c39893765766af4512a0c74e1bb89bc7e6fdf14e3e7337d257cc0f94658179d83320b99f31ff94cd2bad0000000000000000000000000000000003e1a9f9f44ca2cdab4f43a1a3ee3470fdf90b2fc228eb3b709fcd72f014838ac82a6d797aeefed9a0804b22ed1ce8f7
    gas 2000000000
    build

block_build b02
    parent b01
    transactions tx02
    gasLimit 3000000000
    build

block_connect b02
assert_best b02
assert_tx_success tx01
assert_tx_success tx02
