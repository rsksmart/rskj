
comment

// Contracts compiled using
// Truffle v5.1.14 (core: 5.1.14)
// Solidity v0.5.16 (solc-js)
// the contract to be deployed is RecursiveParent

// the contracts source code

// RecursiveInterface.sol

pragma solidity >=0.5.0 <0.6.0;

interface RecursiveInterface {
    function increment(uint level) external;
}

// RecursiveParent.sol

pragma solidity >=0.5.0 <0.6.0;

import "./RecursiveInterface.sol";
import "./RecursiveChild.sol";

contract RecursiveParent is RecursiveInterface {
    uint public counter;
    RecursiveChild public recursive;

    constructor() public {
        recursive = new RecursiveChild(this);
    }

    function increment(uint level) public {
        if (level == 0)
            return;

        counter++;

        recursive.increment(level - 1);
    }
}

// RecursiveChild.sol

pragma solidity >=0.5.0 <0.6.0;

import "./RecursiveInterface.sol";

contract RecursiveChild is RecursiveInterface {
    uint public counter;
    RecursiveInterface public recursive;

    constructor (RecursiveInterface parent) public {
        recursive = parent;
    }

    function increment(uint level) public {
        if (level == 0)
            return;

        counter++;

        recursive.increment(level - 1);
    }
}

end

account_new acc1 20000000

# Deploy RecursiveParent

transaction_build tx01
    sender acc1
    receiverAddress 00
    value 0
    data 608060405234801561001057600080fd5b503060405161001e906100b6565b808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604051809103906000f080158015610070573d6000803e3d6000fd5b50600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506100c3565b610285806102c283390190565b6101f0806100d26000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806361bc221a146100465780637cf5dab01461006457806399c93b7b14610092575b600080fd5b61004e6100dc565b6040518082815260200191505060405180910390f35b6100906004803603602081101561007a57600080fd5b81019080803590602001909291905050506100e2565b005b61009a610195565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60005481565b60008114156100f057610192565b6000808154809291906001019190505550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cf5dab0600183036040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561017957600080fd5b505af115801561018d573d6000803e3d6000fd5b505050505b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fea265627a7a72315820902aa0324b2c98c86efd82a6d396a26f478dc098874af497ccf57dba64c0014f64736f6c63430005100032608060405234801561001057600080fd5b506040516102853803806102858339818101604052602081101561003357600080fd5b810190808051906020019092919050505080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506101f0806100956000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806361bc221a146100465780637cf5dab01461006457806399c93b7b14610092575b600080fd5b61004e6100dc565b6040518082815260200191505060405180910390f35b6100906004803603602081101561007a57600080fd5b81019080803590602001909291905050506100e2565b005b61009a610195565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60005481565b60008114156100f057610192565b6000808154809291906001019190505550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cf5dab0600183036040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561017957600080fd5b505af115801561018d573d6000803e3d6000fd5b505050505b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fea265627a7a72315820fcf11fb16267f8707a34d30e6b2c980491bc4c79582a4b80c3d0958f83f4e3b964736f6c63430005100032
    gas 2000000
    build

block_build b01
    parent g00
    transactions tx01
    build

block_connect b01

# Assert best block
assert_best b01

# invoke increment(350) method

transaction_build tx02
    sender acc1
    nonce 1
    contract tx01   # created in tx01
    value 0
    data 7cf5dab00000000000000000000000000000000000000000000000000000000000000190
    gas 6400000
    build

block_build b02
    parent b01
    transactions tx02
    gasLimit 6500000
    build

block_connect b02

# Assert best block
assert_best b02

# Back to code test, you must check tx02 result is OK
# and RecursiveParent counter value should be 200 == 400 / 2

